// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/zikri124/mygram-api/internal/model"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CheckIsAValidAge provides a mock function with given fields: dobStr
func (_m *UserService) CheckIsAValidAge(dobStr string) (bool, error) {
	ret := _m.Called(dobStr)

	if len(ret) == 0 {
		panic("no return value specified for CheckIsAValidAge")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(dobStr)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(dobStr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dobStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, userId
func (_m *UserService) DeleteUser(ctx context.Context, userId uint32) error {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditUser provides a mock function with given fields: ctx, userData
func (_m *UserService) EditUser(ctx context.Context, userData model.User) (*model.UserView, error) {
	ret := _m.Called(ctx, userData)

	if len(ret) == 0 {
		panic("no return value specified for EditUser")
	}

	var r0 *model.UserView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) (*model.UserView, error)); ok {
		return rf(ctx, userData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User) *model.UserView); ok {
		r0 = rf(ctx, userData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, userData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateAccessToken provides a mock function with given fields: ctx, user
func (_m *UserService) GenerateAccessToken(ctx context.Context, user model.User) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx, userId
func (_m *UserService) GetUserById(ctx context.Context, userId uint32) (*model.UserView, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *model.UserView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (*model.UserView, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *model.UserView); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserLogin provides a mock function with given fields: ctx, userData
func (_m *UserService) UserLogin(ctx context.Context, userData model.UserSignIn) (*model.User, error) {
	ret := _m.Called(ctx, userData)

	if len(ret) == 0 {
		panic("no return value specified for UserLogin")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserSignIn) (*model.User, error)); ok {
		return rf(ctx, userData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserSignIn) *model.User); ok {
		r0 = rf(ctx, userData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserSignIn) error); ok {
		r1 = rf(ctx, userData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRegister provides a mock function with given fields: ctx, userRegData
func (_m *UserService) UserRegister(ctx context.Context, userRegData model.UserSignUp) (*model.UserView, error) {
	ret := _m.Called(ctx, userRegData)

	if len(ret) == 0 {
		panic("no return value specified for UserRegister")
	}

	var r0 *model.UserView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserSignUp) (*model.UserView, error)); ok {
		return rf(ctx, userRegData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserSignUp) *model.UserView); ok {
		r0 = rf(ctx, userRegData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserSignUp) error); ok {
		r1 = rf(ctx, userRegData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
