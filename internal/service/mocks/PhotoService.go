// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/zikri124/mygram-api/internal/model"
)

// PhotoService is an autogenerated mock type for the PhotoService type
type PhotoService struct {
	mock.Mock
}

// DeletePhoto provides a mock function with given fields: ctx, photoId
func (_m *PhotoService) DeletePhoto(ctx context.Context, photoId uint32) error {
	ret := _m.Called(ctx, photoId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePhoto")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, photoId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPhotosByUserId provides a mock function with given fields: ctx, userId
func (_m *PhotoService) GetAllPhotosByUserId(ctx context.Context, userId uint32) ([]model.PhotoView, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPhotosByUserId")
	}

	var r0 []model.PhotoView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) ([]model.PhotoView, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []model.PhotoView); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PhotoView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPhotoById provides a mock function with given fields: ctx, photoId
func (_m *PhotoService) GetPhotoById(ctx context.Context, photoId uint32) (*model.Photo, error) {
	ret := _m.Called(ctx, photoId)

	if len(ret) == 0 {
		panic("no return value specified for GetPhotoById")
	}

	var r0 *model.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (*model.Photo, error)); ok {
		return rf(ctx, photoId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *model.Photo); ok {
		r0 = rf(ctx, photoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, photoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostPhoto provides a mock function with given fields: ctx, photo
func (_m *PhotoService) PostPhoto(ctx context.Context, photo model.Photo) (*model.PhotoResCreate, error) {
	ret := _m.Called(ctx, photo)

	if len(ret) == 0 {
		panic("no return value specified for PostPhoto")
	}

	var r0 *model.PhotoResCreate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Photo) (*model.PhotoResCreate, error)); ok {
		return rf(ctx, photo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Photo) *model.PhotoResCreate); ok {
		r0 = rf(ctx, photo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PhotoResCreate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Photo) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhoto provides a mock function with given fields: ctx, photo
func (_m *PhotoService) UpdatePhoto(ctx context.Context, photo model.Photo) (*model.PhotoResUpdate, error) {
	ret := _m.Called(ctx, photo)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhoto")
	}

	var r0 *model.PhotoResUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Photo) (*model.PhotoResUpdate, error)); ok {
		return rf(ctx, photo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Photo) *model.PhotoResUpdate); ok {
		r0 = rf(ctx, photo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PhotoResUpdate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Photo) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPhotoService creates a new instance of PhotoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPhotoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PhotoService {
	mock := &PhotoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
