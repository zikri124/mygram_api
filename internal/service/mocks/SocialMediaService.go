// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/zikri124/mygram-api/internal/model"
)

// SocialMediaService is an autogenerated mock type for the SocialMediaService type
type SocialMediaService struct {
	mock.Mock
}

// DeleteSocial provides a mock function with given fields: ctx, socialId
func (_m *SocialMediaService) DeleteSocial(ctx context.Context, socialId uint32) error {
	ret := _m.Called(ctx, socialId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSocial")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, socialId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSocialMediasByUserId provides a mock function with given fields: ctx, userId
func (_m *SocialMediaService) GetAllSocialMediasByUserId(ctx context.Context, userId uint32) ([]model.SocialMediaView, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSocialMediasByUserId")
	}

	var r0 []model.SocialMediaView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) ([]model.SocialMediaView, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []model.SocialMediaView); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SocialMediaView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSocialById provides a mock function with given fields: ctx, socialId
func (_m *SocialMediaService) GetSocialById(ctx context.Context, socialId uint32) (*model.SocialMedia, error) {
	ret := _m.Called(ctx, socialId)

	if len(ret) == 0 {
		panic("no return value specified for GetSocialById")
	}

	var r0 *model.SocialMedia
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (*model.SocialMedia, error)); ok {
		return rf(ctx, socialId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *model.SocialMedia); ok {
		r0 = rf(ctx, socialId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SocialMedia)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, socialId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSocial provides a mock function with given fields: ctx, userId, social
func (_m *SocialMediaService) PostSocial(ctx context.Context, userId uint32, social model.NewSocialMedia) (*model.CreateSocialMediaRes, error) {
	ret := _m.Called(ctx, userId, social)

	if len(ret) == 0 {
		panic("no return value specified for PostSocial")
	}

	var r0 *model.CreateSocialMediaRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, model.NewSocialMedia) (*model.CreateSocialMediaRes, error)); ok {
		return rf(ctx, userId, social)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, model.NewSocialMedia) *model.CreateSocialMediaRes); ok {
		r0 = rf(ctx, userId, social)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CreateSocialMediaRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, model.NewSocialMedia) error); ok {
		r1 = rf(ctx, userId, social)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSocial provides a mock function with given fields: ctx, social
func (_m *SocialMediaService) UpdateSocial(ctx context.Context, social model.SocialMedia) (*model.UpdateSocialMediaRes, error) {
	ret := _m.Called(ctx, social)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSocial")
	}

	var r0 *model.UpdateSocialMediaRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.SocialMedia) (*model.UpdateSocialMediaRes, error)); ok {
		return rf(ctx, social)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.SocialMedia) *model.UpdateSocialMediaRes); ok {
		r0 = rf(ctx, social)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UpdateSocialMediaRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.SocialMedia) error); ok {
		r1 = rf(ctx, social)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSocialMediaService creates a new instance of SocialMediaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSocialMediaService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SocialMediaService {
	mock := &SocialMediaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
